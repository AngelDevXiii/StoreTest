// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'features/auth/datasources/local/user_local_datasource/user_entity.dart';
import 'features/cart/datasources/local/cart_local_datasource/cart_item_entity.dart';
import 'features/cart/datasources/local/cart_local_datasource/metadata_entity.dart';
import 'features/product/datasources/local/product_local_datasource/product_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5538945825144728188),
      name: 'CachedUser',
      lastPropertyId: const obx_int.IdUid(6, 7004994117107920486),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5129201308575753545),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8739280453788034546),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3056868812204164968),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8322973091682833838),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7004994117107920486),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4662446953641320973),
      name: 'CachedProduct',
      lastPropertyId: const obx_int.IdUid(14, 6869756099154374192),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9037828812095753810),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3524262657378581817),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6759307473327385969),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2560955392495185002),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3012987207346460662),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1924455701057081291),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8831755175735396795),
            name: 'discount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4608546209306580299),
            name: 'quantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4988561178443450370),
            name: 'stars',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2744280376673646255),
            name: 'reviews',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1466018889580831957),
            name: 'isAvailable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5258680568734667079),
            name: 'productId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7361464193077909318),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6869756099154374192),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6239368108465497723),
      name: 'CachedCartItem',
      lastPropertyId: const obx_int.IdUid(10, 4484656516048159144),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6640633896736600882),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 116360743010313279),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6745036693988143239),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 117803581348488719),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3918377039563376034),
            name: 'cartItemId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1317058364185577050),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7406208232090243508),
            name: 'discount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9077984191956825535),
            name: 'quantity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2457427978292631271),
      name: 'Metadata',
      lastPropertyId: const obx_int.IdUid(3, 4627512564734406286),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5999013451426617322),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4627512564734406286),
            name: 'cartLastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 2457427978292631271),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        9213565506660084425,
        6288749080059687197,
        4484656516048159144,
        5450471537682507401
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CachedUser: obx_int.EntityDefinition<CachedUser>(
        model: _entities[0],
        toOneRelations: (CachedUser object) => [],
        toManyRelations: (CachedUser object) => {},
        getId: (CachedUser object) => object.id,
        setId: (CachedUser object, int id) {
          object.id = id;
        },
        objectToFB: (CachedUser object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, photoUrlOffset);
          fbb.addOffset(5, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = CachedUser(
              uid: uidParam,
              name: nameParam,
              email: emailParam,
              photoUrl: photoUrlParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CachedProduct: obx_int.EntityDefinition<CachedProduct>(
        model: _entities[1],
        toOneRelations: (CachedProduct object) => [],
        toManyRelations: (CachedProduct object) => {},
        getId: (CachedProduct object) => object.id,
        setId: (CachedProduct object, int id) {
          object.id = id;
        },
        objectToFB: (CachedProduct object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final productIdOffset = fbb.writeString(object.productId);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, imageUrlOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addFloat64(6, object.discount);
          fbb.addInt64(7, object.quantity);
          fbb.addFloat64(8, object.stars);
          fbb.addInt64(9, object.reviews);
          fbb.addBool(10, object.isAvailable);
          fbb.addOffset(11, productIdOffset);
          fbb.addInt64(12, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(13, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final productIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final discountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final starsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final reviewsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final isAvailableParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = CachedProduct(
              uid: uidParam,
              name: nameParam,
              price: priceParam,
              productId: productIdParam,
              imageUrl: imageUrlParam,
              description: descriptionParam,
              discount: discountParam,
              stars: starsParam,
              reviews: reviewsParam,
              isAvailable: isAvailableParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..quantity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..createdAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0))
            ..updatedAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));

          return object;
        }),
    CachedCartItem: obx_int.EntityDefinition<CachedCartItem>(
        model: _entities[2],
        toOneRelations: (CachedCartItem object) => [],
        toManyRelations: (CachedCartItem object) => {},
        getId: (CachedCartItem object) => object.id,
        setId: (CachedCartItem object, int id) {
          object.id = id;
        },
        objectToFB: (CachedCartItem object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final cartItemIdOffset = fbb.writeString(object.cartItemId);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addOffset(4, cartItemIdOffset);
          fbb.addOffset(5, imageUrlOffset);
          fbb.addFloat64(6, object.discount);
          fbb.addInt64(7, object.quantity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final cartItemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final discountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = CachedCartItem(
              uid: uidParam,
              name: nameParam,
              price: priceParam,
              cartItemId: cartItemIdParam,
              quantity: quantityParam,
              imageUrl: imageUrlParam,
              discount: discountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Metadata: obx_int.EntityDefinition<Metadata>(
        model: _entities[3],
        toOneRelations: (Metadata object) => [],
        toManyRelations: (Metadata object) => {},
        getId: (Metadata object) => object.id,
        setId: (Metadata object, int id) {
          object.id = id;
        },
        objectToFB: (Metadata object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.cartLastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final cartLastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = Metadata(cartLastUpdated: cartLastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CachedUser] entity fields to define ObjectBox queries.
class CachedUser_ {
  /// See [CachedUser.id].
  static final id =
      obx.QueryIntegerProperty<CachedUser>(_entities[0].properties[0]);

  /// See [CachedUser.uid].
  static final uid =
      obx.QueryStringProperty<CachedUser>(_entities[0].properties[1]);

  /// See [CachedUser.email].
  static final email =
      obx.QueryStringProperty<CachedUser>(_entities[0].properties[2]);

  /// See [CachedUser.photoUrl].
  static final photoUrl =
      obx.QueryStringProperty<CachedUser>(_entities[0].properties[3]);

  /// See [CachedUser.name].
  static final name =
      obx.QueryStringProperty<CachedUser>(_entities[0].properties[4]);
}

/// [CachedProduct] entity fields to define ObjectBox queries.
class CachedProduct_ {
  /// See [CachedProduct.id].
  static final id =
      obx.QueryIntegerProperty<CachedProduct>(_entities[1].properties[0]);

  /// See [CachedProduct.uid].
  static final uid =
      obx.QueryStringProperty<CachedProduct>(_entities[1].properties[1]);

  /// See [CachedProduct.name].
  static final name =
      obx.QueryStringProperty<CachedProduct>(_entities[1].properties[2]);

  /// See [CachedProduct.price].
  static final price =
      obx.QueryDoubleProperty<CachedProduct>(_entities[1].properties[3]);

  /// See [CachedProduct.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<CachedProduct>(_entities[1].properties[4]);

  /// See [CachedProduct.description].
  static final description =
      obx.QueryStringProperty<CachedProduct>(_entities[1].properties[5]);

  /// See [CachedProduct.discount].
  static final discount =
      obx.QueryDoubleProperty<CachedProduct>(_entities[1].properties[6]);

  /// See [CachedProduct.quantity].
  static final quantity =
      obx.QueryIntegerProperty<CachedProduct>(_entities[1].properties[7]);

  /// See [CachedProduct.stars].
  static final stars =
      obx.QueryDoubleProperty<CachedProduct>(_entities[1].properties[8]);

  /// See [CachedProduct.reviews].
  static final reviews =
      obx.QueryIntegerProperty<CachedProduct>(_entities[1].properties[9]);

  /// See [CachedProduct.isAvailable].
  static final isAvailable =
      obx.QueryBooleanProperty<CachedProduct>(_entities[1].properties[10]);

  /// See [CachedProduct.productId].
  static final productId =
      obx.QueryStringProperty<CachedProduct>(_entities[1].properties[11]);

  /// See [CachedProduct.createdAt].
  static final createdAt =
      obx.QueryDateProperty<CachedProduct>(_entities[1].properties[12]);

  /// See [CachedProduct.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<CachedProduct>(_entities[1].properties[13]);
}

/// [CachedCartItem] entity fields to define ObjectBox queries.
class CachedCartItem_ {
  /// See [CachedCartItem.id].
  static final id =
      obx.QueryIntegerProperty<CachedCartItem>(_entities[2].properties[0]);

  /// See [CachedCartItem.uid].
  static final uid =
      obx.QueryStringProperty<CachedCartItem>(_entities[2].properties[1]);

  /// See [CachedCartItem.name].
  static final name =
      obx.QueryStringProperty<CachedCartItem>(_entities[2].properties[2]);

  /// See [CachedCartItem.price].
  static final price =
      obx.QueryDoubleProperty<CachedCartItem>(_entities[2].properties[3]);

  /// See [CachedCartItem.cartItemId].
  static final cartItemId =
      obx.QueryStringProperty<CachedCartItem>(_entities[2].properties[4]);

  /// See [CachedCartItem.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<CachedCartItem>(_entities[2].properties[5]);

  /// See [CachedCartItem.discount].
  static final discount =
      obx.QueryDoubleProperty<CachedCartItem>(_entities[2].properties[6]);

  /// See [CachedCartItem.quantity].
  static final quantity =
      obx.QueryIntegerProperty<CachedCartItem>(_entities[2].properties[7]);
}

/// [Metadata] entity fields to define ObjectBox queries.
class Metadata_ {
  /// See [Metadata.id].
  static final id =
      obx.QueryIntegerProperty<Metadata>(_entities[3].properties[0]);

  /// See [Metadata.cartLastUpdated].
  static final cartLastUpdated =
      obx.QueryDateProperty<Metadata>(_entities[3].properties[1]);
}
